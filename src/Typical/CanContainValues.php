<?php

namespace Codeia\Typical;

use StdClass as Sentinel;

/*
 * This file is a part of the Bloom project.
 * See the LICENSE file at the project root for the terms of use.
 */

/**
 * Allows an object to be given values by a generator.
 *
 * @author Mon Zafra &lt;mz@codeia.ph&gt;
 */
trait CanContainValues {

    /**
     * Receives values from a generator or a function that returns an iterable.
     *
     * The generator will be called with two sentinel objects. The resulting
     * iterator is consumed till the end.
     *
     * When K :> Start, receiveStart() will be called with V. When V :> Start,
     * receiveStart(K, true) will be called if K is not an integer (meaning the
     * value was definitely user-supplied), (K, false) if K is an integer (it
     * might have been autogenerated; i.e. `yield` was called without a key).
     * Same thing for End, replace receiveStart() with receiveEnd(). When
     * neither K nor V are :> Start|End, receive(K, V) will be called.
     *
     * It is up to the implementing class to give meaning to the keys, values
     * and start/end sentinels. receive() MUST be implemented, receiveStart|End
     * are optional.
     *
     * @param callable $gen A function of type Start, End -> Iterable[K => V].
     */
    function accept(callable $gen) {
        $start = new Sentinel;
        $end = new Sentinel;
        $it = $gen($start, $end);
        $this->willReceiveValues();
        foreach ($it as $key => $val) {
            if ($key === $start) {
                $this->receiveStart($val);
            } else if ($val === $start) {
                $this->receiveStart($key, !is_int($key));
            } else if ($key === $end) {
                $this->receiveEnd($val);
            } else if ($val === $end) {
                $this->receiveEnd($key, !is_int($key));
            } else {
                $this->receive($key, $val);
            }
        }
        $this->didReceiveValues();
    }

    /**
     * Called before iterating over the KV pairs.
     */
    function willReceiveValues() {
    }

    /**
     * @see accept()
     * @param mixed $data
     * @param bool $isSignificant
     */
    function receiveStart($data, $isSignificant = true) {
    }

    /**
     * @see accept()
     * @param mixed $data
     * @param bool $isSignificant
     */
    function receiveEnd($data, $isSignificant = true) {
    }

    /**
     * @see accept()
     * @param mixed $key
     * @param mixed $value
     */
    abstract function receive($key, $value);

    /**
     * Called after iterating over the KV pairs.
     */
    function didReceiveValues() {
    }

}
